<File version="2">
  <FileID>1e8a973e-6617-425b-a58c-b5e27831d6b1</FileID>
  <LastExport>131000586249856929</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJQaSURBVHhe7Z0HeBXHuf59i5N/mhPfFKc5vd50
O3Gc5jg9cZzEzo1THHfHDRsXekd0EL2LJqqEBIgmBALUhQqSUO+9994L4v3Pt0cLh/VidGBPUfz+
nud7zp4tszOzs/O9MzuzewshhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCHE/c+785CeCZ86eE7x67cbg5SvX0mg0Go1Gu5atctBcdNzKVeuC123wCX7yySeDb/3v
/wwe8fHX5uMf/1jk9t37kV7ajOyKNmSWtdBoNBqNRjNaeYvDfjKrolUd06r9mm2/lt3ocTlVHUgr
rMHzL47DiJu/NjNnzgnOUAfFZJQj8kKRZhHptQhPq0NERgOi0soQmVpMo9FoNNrb1qJSS5Q/LMHR
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
JbXXFwBzvRZEVDa0qp2rkVVQgWwajUaj0Whj1vJLaxGbkHp9AUAIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCLOWWW/4/WEWJhpcr5ocAAAAASUVORK5C
YII=</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formSimulation" children="Controls">
    <Property name="ClientSize">1215, 660</Property>
    <Property name="FormBorderStyle">Fixed3D</Property>
    <Property name="Name">formSimulation</Property>
    <Property name="Text">StMU Production Control Simulation</Property>
    <Event name="Load">formSimulation_Load</Event>
    <Object type="System.Windows.Forms.Panel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="panel1" children="Controls">
      <Property name="Location">5, 188</Property>
      <Property name="Name">panel1</Property>
      <Property name="Size">1205, 468</Property>
      <Property name="TabIndex">14</Property>
      <Object type="System.Windows.Forms.ListView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="lvSim" children="Controls">
        <Property name="Columns">
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnRandNum" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnWeek" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnInitInventory" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnProduction" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnDemand" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnLeadTime" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnStdDev" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnChangeProd" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnChangeImpl" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnEndInventory" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnShortage" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnCompStore" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnPublicStore" />
          </Item>
          <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <Reference name="columnWeekTotal" />
          </Item>
        </Property>
        <Property name="Dock">Fill</Property>
        <Property name="GridLines">True</Property>
        <Property name="Location">0, 0</Property>
        <Property name="Name">lvSim</Property>
        <Property name="Size">1205, 468</Property>
        <Property name="TabIndex">0</Property>
        <Property name="UseCompatibleStateImageBehavior">False</Property>
        <Property name="View">Details</Property>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="groupbox2" children="Controls">
      <Property name="Location">428, 61</Property>
      <Property name="Name">groupbox2</Property>
      <Property name="Size">233, 115</Property>
      <Property name="TabIndex">13</Property>
      <Property name="TabStop">False</Property>
      <Property name="Text">Totals</Property>
      <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelYTDTotal" children="Controls">
        <Property name="Font">Microsoft Sans Serif, 12pt</Property>
        <Property name="Location">6, 16</Property>
        <Property name="Name">labelYTDTotal</Property>
        <Property name="Size">91, 23</Property>
        <Property name="TabIndex">11</Property>
        <Property name="Text">YTD Total</Property>
      </Object>
      <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxWeeklyTotal" children="Controls">
        <Property name="Location">104, 68</Property>
        <Property name="Name">textboxWeeklyTotal</Property>
        <Property name="ReadOnly">True</Property>
        <Property name="Size">123, 20</Property>
        <Property name="TabIndex">8</Property>
      </Object>
      <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxYTD" children="Controls">
        <Property name="Location">103, 16</Property>
        <Property name="Name">textboxYTD</Property>
        <Property name="ReadOnly">True</Property>
        <Property name="Size">123, 20</Property>
        <Property name="TabIndex">7</Property>
      </Object>
      <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelWeeklyTotal" children="Controls">
        <Property name="Font">Microsoft Sans Serif, 12pt</Property>
        <Property name="Location">6, 68</Property>
        <Property name="Name">labelWeeklyTotal</Property>
        <Property name="Size">104, 23</Property>
        <Property name="TabIndex">12</Property>
        <Property name="Text">Weekly Total</Property>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="groupbox1" children="Controls">
      <Property name="Location">5, 61</Property>
      <Property name="Name">groupbox1</Property>
      <Property name="Size">417, 115</Property>
      <Property name="TabIndex">5</Property>
      <Property name="TabStop">False</Property>
      <Property name="Text">User Variables</Property>
      <Object type="System.Windows.Forms.ComboBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="comboboxLeadTime" children="Controls">
        <Property name="DropDownStyle">DropDownList</Property>
        <Property name="FormattingEnabled">True</Property>
        <Property name="Items">
          <Item type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">1</Item>
          <Item type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">2</Item>
          <Item type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">3</Item>
        </Property>
        <Property name="Location">163, 53</Property>
        <Property name="Name">comboboxLeadTime</Property>
        <Property name="Size">42, 21</Property>
        <Property name="TabIndex">1</Property>
        <Event name="SelectedIndexChanged">comboboxLeadTime_SelectedIndexChanged</Event>
      </Object>
      <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxProd" children="Controls">
        <Property name="Location">163, 86</Property>
        <Property name="Name">textboxProd</Property>
        <Property name="Size">42, 20</Property>
        <Property name="TabIndex">2</Property>
        <Property name="Text">0</Property>
        <Event name="TextChanged">textboxProd_TextChanged</Event>
      </Object>
      <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelProductionChange" children="Controls">
        <Property name="Font">Microsoft Sans Serif, 12pt</Property>
        <Property name="Location">6, 86</Property>
        <Property name="Name">labelProductionChange</Property>
        <Property name="Size">151, 23</Property>
        <Property name="TabIndex">8</Property>
        <Property name="Text">Production Change</Property>
      </Object>
      <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelLeadTime" children="Controls">
        <Property name="Font">Microsoft Sans Serif, 12pt</Property>
        <Property name="Location">6, 53</Property>
        <Property name="Name">labelLeadTime</Property>
        <Property name="Size">151, 23</Property>
        <Property name="TabIndex">7</Property>
        <Property name="Text">Lead Time</Property>
      </Object>
      <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxStdDev" children="Controls">
        <Property name="Location">164, 18</Property>
        <Property name="Name">textboxStdDev</Property>
        <Property name="Size">41, 20</Property>
        <Property name="TabIndex">0</Property>
        <Property name="Text">30</Property>
        <Event name="TextChanged">textboxStdDev_TextChanged</Event>
      </Object>
      <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonAdvanceWeek" children="Controls">
        <Property name="Font">Microsoft Sans Serif, 12pt</Property>
        <Property name="Location">211, 11</Property>
        <Property name="Name">buttonAdvanceWeek</Property>
        <Property name="Size">200, 98</Property>
        <Property name="TabIndex">5</Property>
        <Property name="Text">Advance Week</Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Event name="Click">buttonAdvanceWeek_Click</Event>
      </Object>
      <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="stdDev" children="Controls">
        <Property name="Font">Microsoft Sans Serif, 12pt</Property>
        <Property name="Location">7, 18</Property>
        <Property name="Name">stdDev</Property>
        <Property name="Size">151, 23</Property>
        <Property name="TabIndex">4</Property>
        <Property name="Text">Standard Deviation</Property>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.PictureBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="picturebox1" children="Controls">
      <Property name="Image">
        <Binary>/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAC+AQADASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3+iii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
CiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiisPxT4t0fwdpR1DV7ny0J2xxqN0krf3VXuf0HegDcorwtvip8Q/FLN
N4Q8JFLDOFnljMhb/gRKr+Az9ab/AMJJ8cv+hfh/8B4//jlAHu1FeE/8JJ8cv+hfh/8AAeP/AOOU
f8JJ8cv+hfh/8B4//jlAHu1FeE/8JJ8cv+hfh/8AAeP/AOOVS1Xx38YtD06TUNU0q2tbSMgPK9um
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
YeLZovD0EOoWGr391HBo43F18qQqCPQ4xg85A5HFdfN8adV0y2abWvh9rNmkYG+Qk7FzxyWUAUAe
vVz+oaVdx6/ba3Dq95HbwhzdWjy5heMRnACYwG3Ybd14NcFbfG651KeK30vwPq9zcTRmWJC4Xegx
8wODkcjketZHizx78QpYzpU2gWOhJfWdxKGuJvNdo40JkAI4DY6AjPIoAw/AniTUbDQN+j/D+71D
Vp3nMGsLD8oMjH+Lb90cZGccHpXuHgvw0nhPwtaaWH8y4AMtzN3lmbl2/Pj6AUvgfSDoXgfRdNZS
rwWieYD2cjc36k1v0AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQ
AUUUUAFFFFAHmei+H5j8cNc1CcFrWytEe0yOFaf75H4o/wCdeh39jbanp9xY3kSy21xG0UqN0ZSM
GsXXta1Dw9cNeroU+p6e6gSPYANcRY/vIcb156g5HPHeuen8cXPiTTrj+xJrXSbOM+Xc6lfTI0lu
T/CkKk5k9AxH0PSgDmfA9rNDoPhxFkMs2jeJbnT4ZM/egKyBx9O//ARXS+OtCm8R+PvCVlGp+zQr
czXrY4EP7sbf+BH5foTWn4Q8PRWcNl5FrNa6ZYIy2UVx/rpnf79xKOzHJAB5AZs4yAOxwN27Az60
ALRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUA
Yut6PqGsL5EWuXOm2pGH+xRqszfSRs7fwAPvUWieDNE0BIvsts0ksWSs1y5lcE9SC3QnuRjNb9FA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAF
FFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAf/9k=</Binary>
      </Property>
      <Property name="Location">841, 17</Property>
      <Property name="Name">picturebox1</Property>
      <Property name="Size">255, 165</Property>
      <Property name="TabIndex">3</Property>
      <Property name="TabStop">False</Property>
      <Event name="Click">picturebox1_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelTitle" children="Controls">
      <Property name="Font">Microsoft Sans Serif, 24pt</Property>
      <Property name="Location">1, -5</Property>
      <Property name="Name">labelTitle</Property>
      <Property name="Size">660, 84</Property>
      <Property name="TabIndex">0</Property>
      <Property name="Text">Production Control Simulation</Property>
      <Property name="TextAlign">MiddleCenter</Property>
      <Event name="Click">labelTitle_Click</Event>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnRandNum">
    <Property name="Text">Random Number</Property>
    <Property name="Width">99</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnWeek">
    <Property name="Text">Week</Property>
    <Property name="Width">44</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnInitInventory">
    <Property name="Text">Initial Inventory</Property>
    <Property name="Width">83</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnDemand">
    <Property name="Text">Demand</Property>
    <Property name="Width">52</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnStdDev">
    <Property name="Text">Standard Deviation</Property>
    <Property name="Width">104</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnChangeProd">
    <Property name="Text">Change Production</Property>
    <Property name="Width">104</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnChangeImpl">
    <Property name="Text">Change This Week</Property>
    <Property name="Width">113</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnEndInventory">
    <Property name="Text">Ending Inventory</Property>
    <Property name="Width">93</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnShortage">
    <Property name="Text">Shortage</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnCompStore">
    <Property name="Text">Company Storage</Property>
    <Property name="Width">98</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnPublicStore">
    <Property name="Text">Public Storage</Property>
    <Property name="Width">81</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnWeekTotal">
    <Property name="Text">Weekly Total</Property>
    <Property name="Width">88</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnProduction">
    <Property name="Text">Current Production</Property>
    <Property name="Width">101</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnLeadTime">
    <Property name="Text">Lead Time</Property>
    <Property name="Width">73</Property>
  </Object>
  <Object type="System.Windows.Forms.ErrorProvider, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="errorprovider1">
    <Property name="ContainerControl">
      <Reference name="formSimulation" />
    </Property>
  </Object>
  <Code><![CDATA[#region Application Information
<#
	APPLICATION:	MJOLNIR
	COMPANY: 		SAINT MARY'S UNIVERSITY AT SAN ANTONIO
	AUTHOR: 		OSCAR GUILLERMO CASTRO
	File Name:		PnG ProtoType.psf
	Version:		.8
	 Author Comments

	This script's purpose is to test and create a similar function backend like that of P&G's simulation game.
#>
<#
	.SYNOPSIS
		MJOLNIR attempts to recreate the work of P&G's simulation game.
	
	.DESCRIPTION
		MJOLNIR simulates a production environment where a manager, AKA the user, must adequately prepare inventory and production rates over the course of 52 weeks.
#>
#endregion

#region Initialization
$formSimulation_Load = {
	# ==================================
	#region Event Variables
	# ==================================
	
	# Configuration Variables
	# ==================================
	[string]$global:TracePath = ".\Mjolnir.trace"
	[string]$MathNetPath = ".\MathNet.Numerics.dll"
	
	# Assemblies
	# =================================
	[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
	Add-Type -Path $MathNetPath
	
	# User Variables
	# ==================================
	[int]$global:LeadTime 				= 0
	[double]$global:StandardDeviation 	= 30.0
	[int]$global:ChangeProdLevel 		= 0
	
	# Simulation Variables
	# ========================================
	[double]$global:RandomNumber 	= Get-RandNum
	[int]$global:Week 				= 1 # Start at time = 1.
	[int]$global:InitialInventory 	= 450
	[int]$global:CurrentProduction 	= 70
	[int]$global:Demand 			= Get-InverseNorm -mu 100.0 -sigma $global:StandardDeviation -some_prob $global:RandomNumber
	[int]$global:ChangeThisWeek 	= 0
	[int]$global:Shortage 			= 0
	[int]$global:CompanyStorage 	= 240
	[int]$global:PublicStorage 		= 0
	[double]$global:TotalThisWeek 	= 0.00
	[double]$global:TotalAmount 	= 0.00
	[int]$global:EndingInventory 	= ($global:InitialInventory + $global:CurrentProduction - $global:Demand)
	
	[double]$global:TotalThisWeekBuffer = 0.00
	[double]$global:TotalAmountBuffer 	= 0.00
	#endregion
	# ==================================
	
	# ==================================
	#region Event Logic
	# ==================================
	
	Calculate-Storage
	
	$lvSim.Items.Add($global:RandomNumber)
	$lvSim.Items.Item(0).SubItems.Add($global:Week)
	$lvSim.Items.Item(0).SubItems.Add($global:InitialInventory)
	$lvSim.Items.Item(0).SubItems.Add($global:CurrentProduction)
	$lvSim.Items.Item(0).SubItems.Add($global:Demand)
	$lvSim.Items.Item(0).SubItems.Add($global:StandardDeviation)
	$lvSim.Items.Item(0).SubItems.Add($global:LeadTime)
	$lvSim.Items.Item(0).SubItems.Add($global:ChangeProdLevel)
	$lvSim.Items.Item(0).SubItems.Add($global:ChangeThisWeek)
	$lvSim.Items.Item(0).SubItems.Add($global:EndingInventory)
	$lvSim.Items.Item(0).SubItems.Add($global:Shortage)
	$lvSim.Items.Item(0).SubItems.Add($global:CompanyStorage)
	$lvSim.Items.Item(0).SubItems.Add($global:PublicStorage)
	$lvSim.Items.Item(0).SubItems.Add($global:TotalThisWeek)
	
	Calculate-Week
	#endregion
	# ==================================
}
#endregion

#region Functions (Non-Event)
function Log-Message
{
	<#
	.SYNOPSIS
	Writes an error message to the application's trace file.
	
	.PARAMETER
	[string]$Message - The message that shall be saved and output to the trace file.
	
	.PARAMETER
	[string]$FilePath - The path to the file where the message will be recorded.
	
	.PARAMETER
	[string]$FunctionName - Name of the function that invokes Log-Message
	
	.NOTES
	Intend to make $FunctionName optional to serve a greater use.
	
	.EXAMPLE
	Write-Error -Message "Error occured at Get-NormalCDF!" -Location "C:\Users\Default\Documents\APP_NAME.trace -FuncationName "Get-NormalCDF"
	#>
	
	# =================================
	#region Function Parameters
	# =================================
	param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[String]$Message,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[String]$FilePath,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[String]$FunctionName
	)
	#endregion
	# =================================
	
	# =================================
	# Fuction Variables
	# =================================
	[string]$ScriptName 	= $MyInvocation.ScriptName
	[string]$FullMessage 	= ""
	[string]$OriginMessage	= ""
	
	# =================================
	# Function Logic
	# =================================
	$OriginMessage = "Origin: $ScriptName" + ": $FunctionName" + ": "
	$FullMessage = $OriginMessage + $Message
	
	try
	{
		Add-Content $FilePath $FullMessage
	}
	catch
	{
		Add-Content ".\LOG_MESSAGE.trace" "Error occured with Log-Message function"
	}
}

function Get-GaussianErrorFunction
{
	<#
	.SYNOPSIS
		A Normal Distribution using A&S principles
	.PARAMETER $x
		A floating point variable
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[float]$x
	)
	
	# Constants
	$a1 = 0.254829592
	$a2 = -0.284496736
	$a3 = 1.421413741
	$a4 = -1.453152027
	$a5 = 1.061405429
	$p = 0.3275911
	
	# Save the sign of x
	$sign = 1
	if ($x -lt 0)
	{
		$sign = -1
	}
	
	$x = [Math]::Abs($x)
	
	# A & S 7.1.26
	# A&S Mathematical Application?
	
	$t = 1.0 / (1.0 + ($p * $x))
	$v = (-1 * $x) * $x
	$y = 1.0 - ((((($a5 * $t + $a4) * $t) + $a3) * $t + $a2) * $t + $a1) * $t * [Math]::Exp($v)
	
	$z = $sign * $y
	
	return $z
}

function Get-NormalDistributionCDF
{
	<#
		.DESCRIPTION
			Using the Gaussian ERF, this function obtains a somewhat
			accurate representation of the normal distribution of the
			provided floating point variable.
		.PARAMETER $x
			floating point variable
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[float]$x
	)
	
	$y = $x / [Math]::Sqrt(2)
	$z = Get-GaussianErrorFunction($y)
	$phi = (0.5 * (1.0 + $z))
	
	return $phi
}

function Get-ExcelInvNorm
{
	<#
		.SYNOPSIS
			Obtains the inverse normal distribution of the provided variable. This version of the 
			inverse normal distribution, uses an Excel object that is loaded when the script is 
			first ran.
		.PARAMETER $x
			a floating point variable
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[float]$x
	)
	
	$inv_norm = $global:objExcel.WorksheetFunction.NORMINV($x, $global:demand, $global:std_dev)
	
	return $inv_norm
}

function Get-InverseNorm
{
	<#
		.SYNOPSIS
	Uses MathNet library to compute the inverse normal distribution
		.PARAMETER $mu
	Represents the mean
		.PARAMETER $sigma
	Represents the standard deviation
		.PARAMETER $some_prob
	Represents the probability chance
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[double]$mu,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[double]$sigma,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[double]$some_prob
	)
	$inv_norm = [MathNet.Numerics.Distributions.Normal]::InvCDF($mu, $sigma, $some_prob)
	
	return $inv_norm
}

function Get-RandNum
{
	<#
		.SYNOPSIS
			Returns a random DOUBLE number specifically for Mjolnir between .0001 - .9999
	#>
	$randomNumber = Get-Random -Minimum 1 -Maximum 10000
	[double]$randNum = ($randomNumber / 10000)
	
	return $randNum
}

function Calculate-EndingInventory
{
	<#
		.SYNOPSIS
			Calculates the ending inventory for the week
	#>
	
	[int]$EndingInventory = $global:InitialInventory + $global:CurrentProduction - $global:Demand
	
	$global:EndingInventory = $EndingInventory
}

function Calculate-Storage
{
	<#
		.SYNOPSIS
		Determines whether there is a shortage in the simulated week. If there is a shortage, then the function calculates that amount.
	#>
	
	# ==================================
	#region Function Variables
	# ==================================
	[int]$PubResult = 0 # Amount of units in public storage.
	#endregion
	# ==================================
	
	# ==================================
	#region Function Logic
	# ==================================
	
	# Step 1: Calculate ending inventory
	# ----------------------------------
	Calculate-EndingInventory
	
	# Step 2: Calculate Company Storage
	# ---------------------------------
	if ($global:EndingInventory -ge 240)
	{
		$global:CompanyStorage = 240
		# Step 2.1: Calculate Public Storage
		# ----------------------------------
		$PubResult = $global:EndingInventory - 240
		$global:PublicStorage = $PubResult
	}
	elseif ($global:EndingInventory -ge 0 -and $global:EndingInventory -lt 240)
	{
		$global:CompanyStorage 	= $global:EndingInventory
		$global:PublicStorage 	= 0
	}
	else
	{
		$global:CompanyStorage 	= 0
		$global:PublicStorage 	= 0
	}
	#endregion
	# ==================================
}

function Calculate-Production
{
	<#
	.SYNOPSIS
	Determines if there's been a change in production within the last three weeks.
	
	.PARAMETER
	$weekCounter - A counter detailing the current week.
	
	.OUTPUTS
	$result - the level of production to be set for this week.
	#>
	
	# =======================
	#region Parameters
	# =======================
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[int]$currentWeek
	)
	#endregion
	# ========================
	
	# ========================
	#region Function Variables
	# ========================
	[int]$1Week = $currentWeek - 1 # 1 week ago
	[int]$2Week = $currentWeek - 2 # 2 weeks ago
	[int]$3Week = $currentWeek - 3 # 3 weeks ago
	[int]$index = 0
	
	# Output
	# ------
	[int]$result = 0 # Result of adding all the production changes that are to take place.
	#endregion
	
	# =====================
	#region Function Logic
	# =====================
	<#
	.NOTES
	To obtain the current level of production, the model must look to the past 3 weeks. This is because lead times can only go so far 3 weeks.
	This function checks if the past 3 weeks have submitted a change in production.
	
	.OVERVIEW
	Check for prod change submission from 1 week ago.
		if lead time = 1
			add submission to result
	check for change sumbission from 2 weeks ago.
		if lead time = 2
			add submission to result
	check for change submission from 3 weeks ago.
		if lead time = 3
			add submission to result
	return result
	#>
	
	# 1 week ago
	# ----------
	# Make sure that it's at least week 2.
	if ($1Week -gt 0)
	{
		# Must subtract the index by one to accomdate the listview array.
		$index = $1Week - 1
		
		# 'Change Production' value from 1 week ago
		$ProdChange = $lvSim.Items.Item($index).SubItems.Item(7) # May need to parse value!
		
		if ($ProdChange -ne 0)
		{
			# Lead Time from 1 week ago
			$LeadTime = $lvSim.Items.Item($index).SubItems.Item(6) # May need to parse value!
			
			if ($LeadTime -eq 1)
			{
				$result += $ProdChange
			}
		}
	}
	
	# 2 weeks ago
	# -----------
	# Make sure it's at least week 3.
	if ($2Week -gt 0)
	{
		# Must subtract the index by one to accomdate the listview array.
		$index = $2Week - 1
		
		# 'Change Production' value from 2 weeks ago
		$ProdChange = $lvSim.Items.Item($index).SubItems.Item(7) # May need to parse value!
		
		if ($ProdChange -ne 0)
		{
			# Lead Time from 2 weeks ago
			$LeadTime = $lvSim.Items.Item($index).SubItems.Item(6) # May need to parse value!
			
			if ($LeadTime -eq 2)
			{
				$result += $ProdChange
			}
		}
	}
	
	# 3 weeks ago
	# -----------
	# Make sure it's at least week 4.
	if ($3Week -gt 0)
	{
		# Must subtract the index by one to accomdate the listview array.
		$index = $3Week - 1
		
		# 'Change Production' value from 3 weeks ago
		$ProdChange = $lvSim.Items.Item($index).SubItems.Item(7) # May need to parse value!
		
		if ($ProdChange -ne 0)
		{
			# Lead Time from 3 weeks ago
			$LeadTime = $lvSim.Items.Item($index).SubItems.Item(6) # May need to parse value!
			
			if ($LeadTime -eq 3)
			{
				$result += $ProdChange
			}
		}
	}
	
	return $result
	#endregion
	# =====================
}

function Calculate-Shortage
{
	<#
	.SYNOPSIS
	Calculates storage based on ending inventory status.
	
	.PARAMETER
	$global:EndingInventory - Last Week's ending inventory.
	
	.PARAMETER
	$global:Shortage - Last Week's shortage.
	
	.OVERVIEW
	if END_INVENTORY > 0
		result = 0
	else
		result = END_INVENTORY * -1
	#>
	
	# ====================================
	#region Function Variables
	# ====================================
	[int]$EndInv = $global:EndingInventory
	
	# Output
	# -------
	[int]$result = $null
	#endregion
	# ====================================
	
	# ====================================
	#region Function Logic
	# ====================================
	if ($EndInv -ge 0)
	{
		$result = 0
	}
	else
	{
		$result = $EndInv * -1
	}
	#endregion
	# ====================================
	
	$global:Shortage = $result
}

function Calculate-Week
{
	<#
	.SYNOPSIS
	Use Mjolnir's global variables to calculate the current week's financial data.
	
	.OVERVIEW
	Calculates the following:
	1. Random Number 						- Used for the inverse of the normal CDF.
	2. Initial Inventory					- Based on last week's ending inventory.
	3. Current Production 					- Based on the last three weeks' production changes.
	4. Demand								- Calculated via the inverse normal CDF.
	5. Standard Deviation 					- Used for the inverse normal CDF.
	6. Production Change Request 			- Change to production levels with a lead time.
	7. Lead Time							- Length of weeks until the production change request is implemented.
	8. Changes to Production Implemented	- Changes made to production levels this week.
	9. Ending Inventory						- The amount units left at the end of the week.
	10. Shortage							- Amount of units that weren't able to be produced.
	11. Company Storage						- Amount of units stored at the company's storage warehouse.
	12. Public Storage						- Amount of units stored at a public storage warehouse (expensive).
	13. Total per Week						- Amount of dollars (USD) spent this week.
	14. Total Cost							- Amount of US dollars spent, origin-to-date value, since you began managing.
	15. Lowest Costs Achieved (52 Weeks)	- The high score that is based on how little one can spend in a 52 weeks.
	
	.OUTPUTS
	$WeekResult - Weekly costs
	
	.OUTPUTS
	$ToDateResult - Inception-to-Date costs
	#>
	
	<#
	.AUTHOR
	GOOD GOD! HERE COMES THE PAIN.
	O WOE IS ME. FOR SHAME IT IS THAT ONE INDULGES IN SUCH A WEARY ENDEAVOR.
	- CRIES OF A SOFTWARE ENGINEERING MAJOR
	
	Okay, this is just being redone as the financial function. Phew.
	#>
	
	# ==================================
	#region Function Variables
	# ==================================
	$isProdRequest = $false
	[double]$CompStrResult 	= 0.0 # Cost of company storage
	[double]$PubStrResult 	= 0.0 # Cost of public storage
	[double]$StoreResult 	= 0.0 # Cost of storage
	[double]$ShortResult 	= 0.0 # Cost of shortages
	[int]$ListViewIndex		= $null # Index of list view 
	# Outputs
	# -------
	[double]$WeekResult		= 0.0
	[double]$ToDateResult 	= 0.0
	
	#endregion
	# ==================================
	
	# ==================================
	#region Function Logic
	# ==================================
	
	# Step 1: Check to see if there's been a production change request.
	# -----------------------------------------------------------------
	if ($global:ChangeProdLevel -ne 0)
	{
		# A request has been submitted.
		# Step 1.2: Weekly costs have been incremented by a set number of $2500.00
		$WeekResult += 2500.00
		
		# Since there has been a change, we must check lead time.
		# Step 1.3: Check for costs of lead time.
		# 		3 Weeks - No addtional cost
		# 		2 Weeks - $500
		#		1 Week 	- $1000
		switch ($global:LeadTime)
		{
			1 { $WeekResult += 1000.00; break }
			2 { $WeekResult += 500.00;  break }
			3 { $WeekResult += 0.00;  break }
		}
	}
	
	# Step 2: Calculate storage expenses.
	# ------------------------------------
	$CompStrResult 	= 7.0 * $global:CompanyStorage
	$PubStrResult 	= 20.0 * $global:PublicStorage
	$StoreResult 	= $CompStrResult + $PubStrResult
	
	$WeekResult += $StoreResult
	
	# Step 3: Calculate Shortage expenses.
	# -------------------------------------
	$ShortResult 	= 100.0 * $global:Shortage
	
	$WeekResult 	+= $ShortResult
	
	# Step 4: Export results to buffers
	# ---------------------------------
	$ToDateResult 	= $global:TotalAmount
	$WeekResult 	+= $global:TotalThisWeek
	$ToDateResult 	+= $WeekResult
	
	$global:TotalAmountBuffer 	= $ToDateResult
	$global:TotalThisWeekBuffer = $WeekResult
	
	# Step 5: Display buffer results to the listview.
	# -----------------------------------------------
	# Index 13 (Columns) - Weekly Total
	
	# Set textboxes with buffer values.
	# ---------------------------------
	$textboxWeeklyTotal.Text = $global:TotalThisWeekBuffer
	$textboxYTD.Text = $global:TotalAmountBuffer
	
	# Set listview with buffer value.
	$lvSim.Items.Item($ListViewIndex).SubItems.Item(13).Text = $global:TotalThisWeekBuffer
	#endregion
	# ==================================
	
}

function Advance-Week
{
	<#
	.SYNOPSIS
	Advances through a week through the simulation of the production control model.
	
	.DESCRIPTION
	The production control model, based off of P&G's model, advances stages a week at a time.
	This function is embedded into whatever control is to be used to advance through the weeks.
	
	.OVERVIEW
	Firstly, retrieve all necessary information about the current week.
	Secondly, display that data.
	
	Calc rand num
	get 
		week
		inv
	calc
		prod
		demand
	get
		std dev
		lead
		prod lvl chg request
	calc
		chg this week
		end inv
		short
		cmp str
		pub str
		total/week
		totalYTD
	
	display all
	#>
	
	# =================================
	#region Function Variable
	# =================================
	
	#endregion
	# =================================
}
#endregion

#region Event Handling
$labelTitle_Click={
	#TODO: Place custom script here
	
}

$textboxStdDev_TextChanged={
	<#
	.SYNOPSIS
	Set the value of $global:StandardDeviation to the value specified by the user.
	#>
	
	# =================================
	#region Event Variables
	# =================================
	[double]$stdDev = $null
	$isDouble = $null
	#endregion
	# =================================
	
	# =================================
	#region Event Logic
	# =================================
	
	# Convert from string to double.
	# ------------------------------
	$isDouble = [double]::TryParse($textboxStdDev.Text, [ref]$stdDev)
	
	# Set 
	if ($isDouble -eq $false -or $stdDev -lt 0.0 -or $stdDev -gt 30.0)
	{
		[System.Windows.Forms.MessageBox]::Show("Please enter a value between 0.0 and 30.0!", "Mjolnir")
		$textboxStdDev.Text = "0.0"
	}
	else
	{
		try
		{
			$global:StandardDeviation = $stdDev
		}
		catch
		{
			$ErrorMessage = "Error occured whilst retrieving the value of `$global:StandardDeviation and setting it with the value of `$stdDev as a [double]."
			Log-Message -FilePath $global:TracePath -FunctionName "`textboxStdDev_TextChanged" -Message $ErrorMessage
		}
	}
	#endregion
	# =================================
}

$picturebox1_Click={
	#TODO: Place custom script here
	
}

$buttonAdvanceWeek_Click={
	#TODO: Serves as next week button
	# INCOMING FUCKTON OF WORK
}

$listview1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}

$comboboxLeadTime_SelectedIndexChanged = {
	<#
	.SYNOPSIS
	Sets the value of $global:LeadTime to the value the user chose.
	#>
	
	# =================================
	#region Event Variables
	# =================================
	[int]$LeadTime = $comboboxLeadTime.Text -as [int]
	#endregion
	# =================================
	
	# =================================
	#region Event Logic
	# =================================
	$global:LeadTime = $LeadTime
	#Calculate-Week
	#endregion
	# =================================
}

$textboxProd_TextChanged = {
	<#
	.SYNOPSIS
	Sets the value of $global:ChangeProdLevel to the user's choice.
	#>
	
	# =================================
	#region Event Variables
	# =================================
	[int]$ChangeRequest = $null
	$isInt				= $null
	#endregion
	# =================================
	
	# =================================
	#region Event Logic
	
	# Convert from [String] to [int]
	# ------------------------------
	$isInt = [int32]::TryParse($textboxProd.Text, [ref]$ChangeRequest)
	
	# Display message box if contents aren't in proper in format.
	# -----------------------------------------------------------
	if ($ChangeRequest -lt -20 -or $ChangeRequest -gt 20 -or $isInt -eq $false)
	{
		[System.Windows.Forms.MessageBox]::Show("Please enter a value between -20 and 20! (No decimals)", "Mjolnir")
		$textboxProd.Text = 0
	}
	else
	{
		try
		{
			$global:ChangeProdLevel = $ChangeRequest
		}
		catch
		{
			$ErrorMessage = "Unable to set `$global:ChangeProdLevel."
			Log-Message -FilePath $global:TracePath -FunctionName "`$textboxProd_TextChanged" -Message $ErrorMessage
		}
		
		#Calculate-Week
	}
	#endregion
	# =================================
}
#endregion

#region Control Helper Functions
function Sort-ListViewColumn 
{
	<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.

	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.

	.PARAMETER ListView
		The ListView control to sort.

	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
		
	.PARAMETER  SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
#>
	param(	
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListView]$ListView,
			[Parameter(Mandatory=$true)]
			[int]$ColumnIndex,
			[System.Windows.Forms.SortOrder]$SortOrder = 'None')
	
	if(($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
		try{
		$local:type = [ListViewItemComparer]
	}
	catch{
	Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@  | Out-Null
	}
	#endregion
	
	if($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort()#Sort the items
	}
	else
	{
		if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending	
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder) 
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($lvGroup -eq $null)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($lvGroup -ne $null)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($SubItems -ne $null)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($lvGroup -ne $null)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function Load-ComboBox 
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
	    [Parameter(Mandatory=$false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if(-not $Append)
	{
		$ComboBox.Items.Clear()	
	}
	
	if($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach($obj in $Items)
		{
			$ComboBox.Items.Add($obj)	
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)	
	}

	$ComboBox.DisplayMember = $DisplayMember	
}
#endregion
$maskedtextboxPhone_Validating=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	if(-not $maskedtextboxPhone.MaskFull)
	{
		$_.Cancel = $true
		$errorprovider1.SetError($maskedtextboxPhone, "Please insert a valid phone number");
	}
}

$control_Validated={
	#Pass the calling control and clear error message
	$errorprovider1.SetError($this, "");	
}

# =======================
#region Misc. Information
# ==================================
# Attempt to use PowerShell V5 Classes.
<#
# ==================================
#region SimulWeek Class
# ==================================
class SimulWeek
{
	# =======================================
	#region SimulWeek Variables
	# =======================================
	# User Variables
	# --------------
	[int]$LeadTime = 0
	[int]$StandardDeviation = 0
	[int]$ChangeProdLevel = 0
	
	# Simulation Variables
	# --------------------
	[int]$Week
	[int]$InitialInventory
	[int]$CurrentProduction
	[int]$Demand
	[int]$ChangeThisWeek
	[int]$Shortage
	[int]$CompanyStorage
	[int]$PublicStorage
	[double]$WeeklyTotal
	[int]$EndingInventory
	[double]$randNum
	#endregion
	# =======================================
	
	# ///////////////////////////////////////
	#region SimulWeek constructors
	# =============================
	SimulWeek([int]$leadTime, [int]$stdDev, [int]$changeProdLevel, [int]$Week, [int]$InitialInventory, [int]$currentProd, [int]$changeThisWeek)
	{
		# user variables
		# --------------
		$this.LeadTime = $leadTime
		$this.StandardDeviation = $stdDev
		$this.ChangeProdLevel = $ChangeProdLevel
		
		# simulweek variables
		# -------------------
		$this.Week = $Week
		$this.InitialInventory = $InitialInventory
		$this.CurrentProduction = $currentProd
		$this.randNum = Get-RandNum
		$this.Demand = Get-InverseNorm -mu 100.0 -sigma $this.StandardDeviation -some_prob $this.RandNum
		$this.ChangeThisWeek = $changeThisWeek
		
	}
	#endregion
	# ///////////////////////////////////////
}
#endregion
# ==================================
#>
#endregion
# =======================]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>